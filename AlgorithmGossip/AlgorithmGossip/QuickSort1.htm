<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=gb2312" http-equiv="content-type">






  
  
  
  
  
  
  <title>快速排序法（一）</title>
</head>


<body>





<h3><a href="http://taobao.esmartweb.com/man.htm"># 面试时穿什么着装合适，这里找答案! #</a></h3>






<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 快速排序法（一）</a></h1>






<h2>说明</h2>


快速排序法（quick sort）是目前所公认最快的排序方法之一（视解题的对象而定），虽然快速排序法在最差状况下可以达O(n<sup>2</sup>)，但是在多数的情况下，快速排序法的效率表现是相当不错的。<br>


<br>


快速排序法的基本精神是在数列中找出适当的轴心，然后将数列一分为二，分别对左边与右边数列进行排序，而影响快速排序法效率的正是轴心的选择。<br>


<br>


这边所介绍的第一个快速排序法版本，是在多数的教科书上所提及的版本，因为它最容易理解，也最符合轴心分割与左右进行排序的概念，适合对初学者进行讲解。<br>


<h2>解法</h2>


这边所介绍的快速演算如下：<br>


<ol>


  <li>将最左边的数设定为轴，并记录其值为 s</li>


</ol>


<br>


回圈处理：<br>


<ol>


  <li>令索引 i 从数列左方往右方找，直到找到大于 s 的数</li>


  <li>令索引 j 从数列右方往左方找，直到找到小于 s 的数</li>


  <li>如果 i &gt;= j，则离开回圈</li>


  <li>如果 i &lt; j，则交换索引i与j两处的值</li>


  <li>将左侧的轴与 j 进行交换</li>


  <li>对轴左边进行递回</li>


  <li>对轴右边进行递回</li>


</ol>


<br>


透过以下演算法，则轴左边的值都会小于s，轴右边的值都会大于s，如此再对轴左右两边进行递回，就可以对完成排序的目的，例如下面的实例，*表示要交换的数，[]表示轴：<br>


<ul>


  <li>[41]　24　76*　11　45　64　21　69　19　36*</li>


  <li>[41]　24　36　11　45*　64　21　69　19*　76</li>


  <li>[41]　24　36　11　19　64*　21*　69　45　76</li>


  <li>[41]　24　36　11　19　21　64　69　45　76</li>


  <li>21　24　36　11　19　[41]　64　69　45　76</li>


</ul>


<br>


在上面的例子中，41左边的值都比它小，而右边的值都比它大，如此左右再进行递回至排序完成。 <br>



<h2> 实作</h2>



<ul>


  <li> C
  </li>


</ul>



<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quicksort(int[], int, int); <br><br>int main(void) { <br>    int number[MAX] = {0}; <br>    int i, num;  <br><br>    srand(time(NULL)); <br><br>    printf("排序前："); <br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>        printf("%d ", number[i]); <br>    } <br><br>    quicksort(number, 0, MAX-1); <br><br>    printf("\n排序后："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>void quicksort(int number[], int left, int right) { <br>    int i, j, s; <br><br>    if(left &lt; right) { <br>        s = number[left]; <br>        i = left; <br>        j = right + 1; <br><br>        while(1) { <br>            // 向右找<br>            while(i + 1 &lt; MAX &amp;&amp; number[++i] &lt; s) ;  <br>            // 向左找  <br>            while(j -1 &gt; -1 &amp;&amp; number[--j] &gt; s) ;  <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        number[left] = number[j]; <br>        number[j] = s; <br><br>        quicksort(number, left, j-1);   // 对左边进行递回 <br>        quicksort(number, j+1, right);  // 对右边进行递回 <br>    } <br>} <br></pre>



<br>



<ul>


  <li> Java
  </li>


</ul>



<pre>public class QuickSort {<br>    public static void sort(int[] number) {<br>        sort(number, 0, number.length-1);<br>    }<br>    <br>    private static void sort(int[] number, <br>                             int left, int right) {<br>        if(left &lt; right) { <br>            int s = number[left]; <br>            int i = left; <br>            int j = right + 1; <br><br>            while(true) { <br>                // 向右找 <br>                while(i + 1 &lt; number.length &amp;&amp; number[++i] &lt; s) ;  <br>                // 向左找 <br>                while(j -1 &gt; -1 &amp;&amp; number[--j] &gt; s) ;  <br>                if(i &gt;= j) <br>                    break; <br>                swap(number, i, j); <br>            } <br><br>            number[left] = number[j]; <br>            number[j] = s; <br><br>            sort(number, left, j-1);   // 对左边进行递回 <br>            sort(number, j+1, right);  // 对右边进行递回 <br>        }<br>    }<br>    <br>    private static void swap(int[] number, int i, int j) {<br>        int t; <br>        t = number[i]; <br>        number[i] = number[j]; <br>        number[j] = t;<br>    }<br>}</pre>


<br>


<br>


<br>






</body>
</html>
